#!/usr/bin/python -tt

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
sys.path.insert(0,'/usr/share/yum-cli')

import yum
from yum.misc import setup_locale
from yum.i18n import exception2msg
import yum.Errors
from utils import YumUtilBase

import logging
import rpmUtils
import rpm

rhn_source_repos = False



class YumBuildDep(YumUtilBase):
    NAME = 'yum-listbuilddep'
    VERSION = '1.0'
    USAGE = 'yum-listbuilddep package1.spec [package2.spec] [...]'

    def __init__(self):
        YumUtilBase.__init__(self,
                             YumBuildDep.NAME,
                             YumBuildDep.VERSION,
                             YumBuildDep.USAGE)
        self.logger = logging.getLogger("yum.verbose.cli.yumbuildep")
        # Add util commandline options to the yum-cli ones
        self.optparser = self.getOptionParser()
        if hasattr(rpm, 'reloadConfig'):
            self.optparser.add_option("--target",
                              help="set target architecture for spec parsing")
        self.main()

    def main(self):
        # Parse the commandline option and setup the basics.
        try:
            opts = self.doUtilConfigSetup()
        except yum.Errors.RepoError, e:
            self.logger.error("Cannot handle specific enablerepo/disablerepo options.")
            sys.exit(50)

        # turn of our local gpg checking for opening the srpm if it is turned
        # off for repos :)
        if (opts.nogpgcheck or
            not self.conf.localpkg_gpgcheck or not self.conf.gpgcheck):
            self.ts.pushVSFlags((rpm._RPMVSF_NOSIGNATURES|rpm._RPMVSF_NODIGESTS))

        # Check if there is anything to do.
        if len(self.cmds) < 1:
            print self.optparser.format_help()
            sys.exit(0)

        try:
            self.get_build_deps(opts)
        except yum.Errors.MiscError, e:
            msg = "There was a problem getting the build deps, exiting:\n   %s" % e
            self.logger.error(msg)
            sys.exit(1)
        sys.exit()

    def get_build_deps(self,opts):
        srcnames = []
        specnames = []
        srpms = []
        specworks = False
        reloadworks = False

        # See if we can use spec files for buildrequires
        if hasattr(rpm, 'spec') and hasattr(rpm.spec, 'sourceHeader'):
            specworks = True
        # See if we can reload rpm configuration
        if hasattr(rpm, 'reloadConfig'):
            reloadworks = True

        for arg in self.cmds:
            if specworks and arg.endswith('.spec'):
                specnames.append(arg)

        toActOn = []
        for name in specnames:
            # (re)load rpm config for target if set
            if reloadworks and opts.target:
                rpm.reloadConfig(opts.target)

            try:
                spec = rpm.spec(name)
            except ValueError:
                self.logger.error("Bad spec: %s" % name)
                continue

            # reset default rpm config after each parse to avoid side-effects
            if reloadworks:
                rpm.reloadConfig()

            buildreqs = []
            for d in rpm.ds(spec.sourceHeader, 'requires'):
                buildreqs.append(d.DNEVR()[2:])

            if len(buildreqs) > 0:
                self.logger.info('["%s"]' % '","'.join(buildreqs))
            else:
                self.logger.info('[]')

if __name__ == '__main__':
    setup_locale()
    util = YumBuildDep()