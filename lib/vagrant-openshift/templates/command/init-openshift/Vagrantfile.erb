# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/vagrant", disabled: true

  gopath = nil
  if ENV['GOPATH'] && !ENV['GOPATH'].empty?
    gopath = File.expand_path(ENV['GOPATH'].split(/:/).last)
    vagrantfile = File.expand_path(File.dirname(__FILE__))
    if !vagrantfile.index(gopath)
      puts "\nYou have GOPATH set to '#{gopath}', which should contain your OpenShift source repositories, but are running from '#{vagrantfile}' instead.\n\nSet GOPATH='' when running vagrant or move your openshift repos under '#{gopath}/src/github.com/openshift'."
    else
      config.vm.synced_folder gopath, "/data", create: true
    end
  end

  # Box to load when booting the vagrant VM. This section applicable only to VirtualBox.
  # Other providers may override this value
  config.vm.box      = "<%= box_info[:virtualbox][:box_name] %>"
  config.vm.box_url  = "<%= box_info[:virtualbox][:box_url] %>"
  config.vm.hostname = 'broker.example.com'

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant.
  config.vm.provider :virtualbox do |vb|
     vb.gui  = false
     vb.name = "<%= box_info[:instance_name] %>"
     vb.customize ["modifyvm", :id, "--memory", "2048"]
<% box_info[:port_mappings].each do |guest_port,host_port| %>
     config.vm.network "forwarded_port", guest: <%=guest_port%>, host: <%=host_port%>
<% end %>
  end

  config.vm.provider "vmware_fusion" do |vmf, override|
    vmf.gui             = false
    vmf.name            = "<%= box_info[:instance_name] %>"
    vmf.vmx["memsize"]  = "2048"
    override.vm.box     = "<%= box_info[:vmware][:box_name] %>"
    override.vm.box_url = "<%= box_info[:vmware][:box_url] %>"
  end

  config.vm.provider "vmware_workstation" do |vmw, override|
    vmw.gui             = false
    vmw.name            = "<%= box_info[:instance_name] %>"
    vmw.vmx["memsize"]  = "2048"
    override.vm.box     = "<%= box_info[:vmware][:box_name] %>"
    override.vm.box_url = "<%= box_info[:vmware][:box_url] %>"
  end

  config.vm.provider :aws do |aws, override|
    # You will need the latest AWS plugin for vagrant
    # https://github.com/mitchellh/vagrant-aws

    if gopath
      override.vm.synced_folder gopath, "/data", disabled: true
    end

    aws_creds_file = Pathname.new(File.expand_path("<%= box_info[:aws_creds_file]%>"))
    aws_creds      = aws_creds_file.exist? ? Hash[*(File.open(aws_creds_file.to_s).readlines.map{ |l| l.split('=') }.flatten.map{ |i| i.strip })] : {}

    override.vm.box               = "dummy"
    override.vm.box_url           = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
    override.ssh.username         = "<%= box_info[:aws][:ami_ssh_user] %>"
    override.ssh.private_key_path = aws_creds["AWSPrivateKeyPath"] || "PATH TO AWS KEYPAIR PRIVATE KEY"

    aws.access_key_id     = aws_creds["AWSAccessKeyId"] || "AWS ACCESS KEY"
    aws.secret_access_key = aws_creds["AWSSecretKey"]   || "AWS SECRET KEY"
    aws.keypair_name      = aws_creds["AWSKeyPairName"] || "AWS KEYPAIR NAME"
    aws.ami               = "<%= box_info[:aws][:ami] %>"
    aws.region            = "<%= box_info[:aws][:ami_region] %>"
    aws.instance_type     = "m3.large"
    aws.tags              = { "Name" => "<%= box_info[:instance_name] %>" }
    aws.user_data         = %{
#cloud-config

growpart:
  mode: auto
  devices: ['/']
runcmd:
- [ sh, -xc, "echo 'Defaults:<%= box_info[:aws][:ami_ssh_user] %> \!requiretty' >> /etc/sudoers"]
    }
    <% if box_info[:os] == :centos %>
      aws.block_device_mapping = [
        {
           "DeviceName" => "/dev/sda",
           "Ebs.VolumeSize" => <%= box_info[:aws][:ebs_volume_size] %>
        }
      ]
    <% end %>
  end

  config.vm.provider :openstack do |os, override|
    # You will need the latest vagrant-openstack-plugin
    # https://github.com/cloudbau/vagrant-openstack-plugin

    if gopath
      override.vm.synced_folder gopath, "/data", disabled: true
    end

    os_creds_file = Pathname.new(File.expand_path("<%= box_info[:openstack_creds_file]%>"))
    os_creds      = os_creds_file.exist? ? Hash[*(File.open(os_creds_file.to_s).readlines.map{ |l| l.split('=') }.flatten.map{ |i| i.strip })] : {}

    override.vm.box               = "dummy"
    override.vm.box_url           = "https://github.com/cloudbau/vagrant-openstack-plugin/raw/master/dummy.box"
    override.ssh.private_key_path = os_creds["OSPrivateKeyPath"] || "PATH TO OPENSTACK KEYPAIR PRIVATE KEY"

    os.endpoint     = os_creds["OSEndpoint"] || "OPENSTACK ENDPOINT URL"
    os.tenant       = os_creds["OSTenant"] || "OPENSTACK TENANT"
    os.username     = os_creds["OSUsername"] || "OPENSTACK USERNAME"
    os.api_key      = os_creds["OSAPIKey"] || "OPENSTACK PASSWORD"
    os.flavor       = "m1.large"
    os.image        = "<%= box_info[:openstack][:image] %>"
    os.keypair_name = os_creds["OSKeyPairName"] || "OPENSTACK KEYPAIR NAME"
    os.ssh_username = "<%= box_info[:openstack][:ssh_username] %>"
    os.server_name  = "<%= box_info[:instance_name] %>"
    os.networks     = []
    os.user_data    = %{
#cloud-config

growpart:
  mode: auto
  devices: ['/']
runcmd:
- [ sh, -xc, "echo 'Defaults:<%= box_info[:openstack][:ssh_username] %> \!requiretty' >> /etc/sudoers"]
    }
  end

  config.vm.provision   :openshift
  config.vm.guest     = :<%= box_info[:vagrant_guest]%>

  # Domain zone under which application will be created. Eg: appname.namespace.example.com
  config.openshift.cloud_domain = "example.com"

  # Packages that are part of OpenShift Origin code but should not be compiled or installed
<% if box_info[:os] == :fedora %>
  config.openshift.ignore_packages = []
<% else %>
  config.openshift.ignore_packages = [
    'openshift-origin-util',
    'rubygem-openshift-origin-container-libvirt',
    'openshift-origin-cartridge-jbosseap',
    'openshift-origin-cartridge-jbossews',
    'openshift-origin-cartridge-jbossas',
    'avahi-cname-manager',
    'rubygem-openshift-origin-dns-avahi',
    'openshift-origin-cartridge-mariadb',
  ]
<% end %>

# Any additional services on the machine which should be restarted after installing OpenShift packages
# config.openshift.additional_services = [
# ]

# Advanced settings to be copied into puppet manifest
# config.openshift.advanced_puppet_values = {
# }
end
